#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("app:server");
var http = require("http");
const connectDB = require("../db/database");
const config = require("../config");
const Tag = require("../models/tags");
const User = require("../models/users");

/**
 * Get port from environment and store in Express.
 */

const port = config.port;
const masterId = config.master.id;
const masterPassword = config.master.password;

app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log(`Server listening on ${bind}`);

  /**
   * connect db
   */
  connectDB()
    .then(async () => {
      if ((await Tag.countDocuments()) <= 0) {
        await Tag.create({ name: "전체보기" });
        console.log("전체보기 created");
      }

      if ((await User.countDocuments()) <= 0) {
        await User.create({
          userId: masterId,
          password: masterPassword,
          name: "master",
        });
        console.log("master user created");
      }
      console.log("DB connected");
    })
    .catch(console.error);
}
